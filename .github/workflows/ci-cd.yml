name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      force_all:
        description: 'Force build all applications'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  pages: write
  id-token: write
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      affected-apps: ${{ steps.affected.outputs.apps }}
      has-web-app: ${{ steps.affected.outputs.has-web-app }}
      has-backend: ${{ steps.affected.outputs.has-backend }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Get affected applications
        id: affected
        run: |
          if [ "${{ github.event.inputs.force_all }}" == "true" ]; then
            echo "apps=[\"@f1-app/web-app\", \"@f1-app/backend-api\", \"@f1-app/mobile-app\"]" >> $GITHUB_OUTPUT
            echo "has-web-app=true" >> $GITHUB_OUTPUT
            echo "has-backend=true" >> $GITHUB_OUTPUT
          else
            AFFECTED=$(npx nx show projects --affected --base=origin/main --head=HEAD --type=app)
            echo "Affected apps: $AFFECTED"

            # Convert to JSON array
            APPS_JSON=$(echo "$AFFECTED" | jq -R -s -c 'split("\n") | map(select(length > 0))')
            echo "apps=$APPS_JSON" >> $GITHUB_OUTPUT

            # Check specific apps
            echo "has-web-app=$(echo "$AFFECTED" | grep -q "@f1-app/web-app" && echo "true" || echo "false")" >> $GITHUB_OUTPUT
            echo "has-backend=$(echo "$AFFECTED" | grep -q "@f1-app/backend-api" && echo "true" || echo "false")" >> $GITHUB_OUTPUT
          fi

  lint-and-test:
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.affected-apps != '[]'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint affected
        run: npx nx affected --target=lint --base=origin/main --head=HEAD

      - name: Test affected
        run: |
          # Skip integration tests that require real database
          AFFECTED_PROJECTS=$(npx nx show projects --affected --base=origin/main --head=HEAD)
          if [[ $AFFECTED_PROJECTS == *"e2e"* || $AFFECTED_PROJECTS == *"backend"* ]]; then
            echo "Skipping integration tests in CI pipeline"
            npx nx affected --target=test --base=origin/main --head=HEAD --coverage --testPathIgnorePatterns=".*\.integration\.test\.ts$"
          else
            npx nx affected --target=test --base=origin/main --head=HEAD --coverage
          fi

  build-web-app:
    runs-on: ubuntu-latest
    needs: [ setup, lint-and-test ]
    if: needs.setup.outputs.has-web-app == 'true' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build web-app
        run: npx nx build web-app

      - name: Copy font files
        run: node scripts/copy-fonts.js

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './apps/frontend/web-app/dist'

  deploy-web-app:
    runs-on: ubuntu-latest
    needs: build-web-app
    if: github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  build-backend:
    runs-on: ubuntu-latest
    needs: [ setup, lint-and-test ]
    if: needs.setup.outputs.has-backend == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build backend
        run: npx nx build @f1-app/backend-api

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-build-${{ github.sha }}
          path: './dist/apps/backend'
          retention-days: 30

  deploy-backend-staging:
    runs-on: ubuntu-latest
    needs: build-backend
    if: github.ref == 'refs/heads/develop'
    environment:
      name: backend-staging
      url: https://api-staging.your-domain.com
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-build-${{ github.sha }}
          path: ./dist

      - name: Deploy to staging
        run: |
          echo "Deploying backend to staging..."
          # Add your staging deployment commands here

  deploy-backend-production:
    runs-on: ubuntu-latest
    needs: build-backend
    if: github.ref == 'refs/heads/main'
    environment:
      name: backend-production
      url: https://api.your-domain.com
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-build-${{ github.sha }}
          path: ./dist

      - name: Deploy to production
        run: |
          echo "Deploying backend to production..."
          # Add your production deployment commands here

  build-mobile:
    runs-on: ubuntu-latest
    needs: [ setup, lint-and-test ]
    if: needs.setup.outputs.has-mobile == 'true'
    strategy:
      matrix:
        platform: [ android ]
        # Add ios when you have macOS runners: [android, ios]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Java (Android)
        if: matrix.platform == 'android'
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        if: matrix.platform == 'android'
        uses: android-actions/setup-android@v3

      - name: Install dependencies
        run: npm ci

      - name: Build mobile app
        run: npx nx build-${{ matrix.platform }} @f1-app/mobile-app

      - name: Upload mobile artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mobile-${{ matrix.platform }}-${{ github.sha }}
          path: './apps/frontend/mobile-app/${{ matrix.platform }}/app/build/outputs/**/*'
          retention-days: 30
