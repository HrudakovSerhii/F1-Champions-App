name: Deploy Backend API

on:
  push:
    branches:
      - main
    paths:
      - 'apps/backend/**'
      - 'libs/**'
      - 'package.json'
      - 'package-lock.json'
      - 'nx.json'
      - 'tsconfig.base.json'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run backend tests
        run: npx nx test @f1-champions-app/backend

      - name: Run backend e2e tests
        run: npx nx e2e @f1-champions-app/backend-e2e

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build backend
        run: npx nx build @f1-champions-app/backend

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: './dist/apps/backend'
          retention-days: 30

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://api-staging.your-domain.com
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: ./dist

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          # Examples:
          # - Deploy to Heroku, Railway, Render, etc.
          # - Deploy to AWS ECS, Google Cloud Run, etc.
          # - Deploy to your own servers via SSH
          echo "Deployment completed successfully"

  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: github.event.inputs.environment == 'production'
    environment:
      name: production
      url: https://api.your-domain.com
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: ./dist

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here
          echo "Production deployment completed successfully"
